@model IEnumerable<ARS.Models.Transaction>

@{
    ViewBag.Title = "Index";
    Layout = "~/Views/Shared/_LayoutAdmin.cshtml";
}


<link href="~/Content/admin-view.css" rel="stylesheet" />
<script type="text/javascript" src="https://www.gstatic.com/charts/loader.js"></script>
<script src="https://use.fontawesome.com/eac163b655.js"></script>

<h2>Transactions List</h2>


<script type="text/javascript">


</script>


<table id="example" class="display">
    <thead>
        <tr>
            <th scope="col">Id</th>
            <th scope="col">Price</th>
            <th scope="col">Type</th>
            <th scope="col">Status</th>
            <th scope="col">Created Date</th>
            <th scope="col">Updated Date</th>
        </tr>
    </thead>
    <tbody>
        @foreach (var item in Model)
        {
            <tr>
                <td>
                    @Html.DisplayFor(modelItem => item.id)
                </td>
                <td>
                    $@Html.DisplayFor(modelItem => item.price)
                </td>
                <td>
                    @if (item.type == 0)
                    {
                        <span>Paypal</span>
                    }
                    else if (item.type == 1)
                    {
                        <span>Visa</span>
                    }
                    else if (item.type == 2)
                    {
                        <span>Local Banking</span>
                    }
                    else
                    {
                        <span>Google Pay</span>
                    }
                </td>
                <td>
                    @if (item.type == 0)
                    {
                        <span>Pending</span>
                    }
                    else if (item.type == 1)
                    {
                        <span>Success</span>
                    }
                    else
                    {
                        <span>Cancel</span>
                    }
                </td>
                <td>
                    @Convert.ToDateTime(@item.createdAt).ToString("dd/MM/yyyy")
                </td>
                <td>
                    @Convert.ToDateTime(@item.updatedAt).ToString("dd/MM/yyyy")
                </td>
                @*<td>
                        @Html.ActionLink("Edit", "Edit", new { id = item.id }) |
                        @Html.ActionLink("Details", "Details", new { id = item.id }) |
                        @Html.ActionLink("Delete", "Delete", new { id = item.id })
                    </td>*@
            </tr>
        }
    </tbody>

</table>
<div id="reportrange" style="background: #fff; cursor: pointer; padding: 5px 10px; border: 1px solid #ccc; width: 100%">
    <i class="fa fa-calendar"></i>&nbsp;
    <span></span> <i class="fa fa-caret-down"></i>
</div>
<div id="curve_chart" style="width: 900px; height: 500px"></div>
@section scripts {

    <script type="text/javascript">
        $(document).ready(function () {
            chart_data = [{ creatAt: new Date('2021-01-10'),price : Number('2000') },
                { creatAt: new Date(2021,12,12), price: Number('3000') },
                { creatAt: new Date('2021-01-12'), price: Number('4000') },
                { creatAt: new Date('2021-01-13'), price: Number('5000') },
                { creatAt: new Date('2021-01-14'), price: Number('6000') },
                { creatAt: new Date('2021-01-15'), price: Number('7000') },
                { creatAt: new Date('2021-01-16'), price: Number('8000') },
                { creatAt: new Date('2021-01-17'), price: Number('9000') },
                { creatAt: new Date('2021-01-18'), price: Number('10000') }]
            $(function () {

                var start = moment().subtract(29, 'days');
                var end = moment();

                function cb(start, end) {
                    $('#reportrange span').html(start.format('MMMM D, YYYY') + ' - ' + end.format('MMMM D, YYYY'));
                }

                $('#reportrange').daterangepicker({
                    startDate: start,
                    endDate: end,
                    ranges: {
                        'Today': [moment()],
                        'Yesterday': [moment().subtract(1, 'days'), moment().subtract(1, 'days')],
                        'Last 7 Days': [moment().subtract(6, 'days'), moment()],
                        'Last 30 Days': [moment().subtract(29, 'days'), moment()],
                        'This Month': [moment().startOf('month'), moment().endOf('month')],
                        'Last Month': [moment().subtract(1, 'month').startOf('month'), moment().subtract(1, 'month').endOf('month')]
                    }
                }, cb);

                cb(start, end);
            });
            $('#reportrange').on('apply.daterangepicker', function (ev, picker) {
                console.log(picker.startDate.format('YYYY-MM-DD'));
                console.log(picker.endDate.format('YYYY-MM-DD'));
                google.charts.load('current', { 'packages': ['line'] });
                google.charts.setOnLoadCallback(drawChart);

                function drawChart() {
                    var data = new google.visualization.DataTable();
                    data.addColumn('date', 'Date');
                    data.addColumn('number', 'Price');
                    for (var i = 0; i < chart_data.length; i++) {
                        var result = chart_data.filter(x => x.creatAt <= picker.endDate.format('YYYY-MM-DD') && x.creatAt >= picker.startDate.format('YYYY-MM-DD'));
                        data.addRow([result.Date, result.price]);
                    }
                    var options = {
                        chart: {
                            title: 'Revenue chart over time',
                            subtitle: 'Currency(VND)'
                        },
                        height: 500,
                        hAxis: {
                            format: 'yyyy/MM/dd'
                        }
                    };

                    var chart = new google.charts.Line(document.getElementById('curve_chart'));

                    chart.draw(data, options);
                }

            });
        });
    </script>
}





